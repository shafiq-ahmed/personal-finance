<?php

namespace app\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use app\models\Transactions;

/**
 * TransactionsSearch represents the model behind the search form of `app\models\Transactions`.
 */
class TransactionsSearch extends Transactions
{
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'expenseId', 'sourceId'], 'integer'],
            [['createdAt', 'source.name'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios()
    {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = Transactions::find()->joinWith('source')->with('expense');

        // add conditions that should always apply here

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);


        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
            'expenseId' => $this->expenseId,
            'sourceId' => $this->sourceId,
            'createdAt' => $this->createdAt,
        ]);

        $query->andFilterWhere(['like', 'sources.name', $this->getAttribute('source.name')]);

        return $dataProvider;
    }

    /**
     * Adds relational attributes to transactions model
     */
    public function attributes()
    {
        return array_merge(parent::attributes(), ['source.name']); // TODO: Change the autogenerated stub
    }


}
