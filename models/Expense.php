<?php

namespace app\models;

use app\helpers\ErrorProcessor;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;

/**
 * This is the model class for table "expense".
 *
 * @property int $id
 * @property string $name
 * @property int $source
 * @property float $amount
 * @property string $month
 * @property string $expenseDate
 * @property int $createdAt
 * @property int $isPaid
 */
class Expense extends ActiveRecord
{

    const MINIMUM_AMOUNT = 500;

    /**
     * {@inheritdoc}
     */
    //isPaid data will be mapped to this constant in view page
    const IS_PAID = [0 => 'Unpaid', 1 => 'Paid'];
    const SCENARIO_CREATE = 'create';
    const SCENARIO_MAkE_PAYMENT = 'make_payment';
    /**
     * @var mixed|null
     */


    /**
     * @var mixed|null
     */


    public static function tableName()
    {
        return 'expense';
    }

    /**
     * This is a behavior method that automatically assigns values to
     * the createdAt, expenseDate and month columns
     * The behavior uses the 'beofreInsert' event
     * @return array[]
     */

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['createdAt'],
                    //ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],

            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['expenseDate'],
                ],
                // if you're using datetime instead of UNIX timestamp:
                'value' => new Expression('NOW()'),
            ],
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['month'],
                ],
                'value' => date('F'),
            ],

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            //TODO: name must be valid name. No special or numeric characters can be added
//            [['name', 'amount'], 'required', 'on' => ['create', 'account']],
//            [['amount'], 'required', 'on' => ['modify']],
            [['name', 'amount'], 'required'],
            [['amount'], 'number', 'min' => 100],
            [['name'], 'string', 'max' => 255],
            [['source', 'isPaid'], 'integer'],
            [['source', 'isPaid'], 'required'],
            [['isPaid'], 'default', 'value' => 1],
            ['amount', 'checkSufficientBalance']
            //[['name'], 'match', 'pattern' => '^[a-zA-Z]+$','skipOnError' => true],


        ];
    }

    public function checkSufficientBalance($attribute, $params)
    {
        if (!$this->isNewRecord) {
            $sourceModel = Sources::findOne($this->source);
            if ($this->amount > ($sourceModel->currentBalance - self::MINIMUM_AMOUNT)) {
                $this->addError($attribute, Yii::t('user', 'You entered an invalid date format.'));
            }
        }
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'source' => 'Source',
            'amount' => 'Amount',
            'month' => 'Month',
            'expenseDate' => 'Expense Date',
            'createdAt' => 'Created At',
            'isPaid' => 'Is Paid',
        ];
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    /**
     * This scenarios method declares two scenarios for the model
     * @return array[]
     */
    public function scenarios()
    {
        $scenarios = parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[self::SCENARIO_CREATE] = ['name', 'amount'];
        $scenarios[self::SCENARIO_MAkE_PAYMENT] = ['source', 'isPaid'];

        return $scenarios;
    }

    //TODO: implement eager loading for showing expense view
    public function getSourceModel()
    {
        return $this->hasOne(Sources::class, ['id' => 'source']);
    }

    public static function getTotalOutstandingAmount()
    {
        return self::find()->where('isPaid=0')->sum('amount');
    }

    /**
     * Executes after an expense payment is made, when the expense model is updated.
     * After the expense model is saved, the relational source model is updated.
     * And the method records the transaction in the transaction table.
     */
    public function afterSave($insert, $changedAttributes)
    {
        $this->sourceModel->currentBalance -= $this->amount;

        if (!$this->sourceModel->save()) {
            throw new \Exception(ErrorProcessor::arrayToString($this->sourceModel->errors));
        }

        $transactionModel = new Transactions();
        $transactionModel->sourceId = $this->sourceModel->id;
        $transactionModel->expenseId = null;
        $transactionModel->createdAt = date('Y-m-d H:i:s', strtotime('+6 hours'));
        if (!$transactionModel->save()) {
            throw  new \Exception(ErrorProcessor::arrayToString($transactionModel->errors));
        }
        parent::afterSave(false, $changedAttributes);
    }


}
