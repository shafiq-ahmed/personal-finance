<?php

namespace app\models;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Expression;

/**
 * This is the model class for table "expense".
 *
 * @property int $id
 * @property string $name
 * @property int $source
 * @property float $amount
 * @property string $month
 * @property string $expenseDate
 * @property int $createdAt
 * @property int $isPaid
 */
class Expense extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    //isPaid data will be mapped to this constant in view page
    const IS_PAID = [0 => 'Unpaid', 1 => 'Paid'];
    const SCENARIO_CREATE ='create';
    const SCENARIO_MAkE_PAYMENT='make_payment';

    public static function tableName()
    {
        return 'expense';
    }

    /**
     * This is a behavior method that automatically assigns values to
     * the createdAt, expenseDate and month columns
     * The behavior uses the 'beofreInsert' event
     * @return array[]
     */

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['createdAt'],
                    //ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],

            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['expenseDate'],
                ],
                // if you're using datetime instead of UNIX timestamp:
                'value' => new Expression('NOW()'),
            ],
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['month'],
                ],
                'value' => date('F'),
            ],

        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            //TODO: name must be valid name. No special or numeric characters can be added
//            [['name', 'amount'], 'required', 'on' => ['create', 'account']],
//            [['amount'], 'required', 'on' => ['modify']],
            [['name', 'amount'], 'required'],
            [['amount'], 'number', 'min' => 100],
            [['name'], 'string', 'max' => 255],
            [['source', 'isPaid'], 'integer'],
            [['source', 'isPaid'], 'required'],
            [['isPaid'],'default','value'=>1]

            //[['name'], 'match', 'pattern' => '^[a-zA-Z]+$','skipOnError' => true],


        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'source' => 'Source',
            'amount' => 'Amount',
            'month' => 'Month',
            'expenseDate' => 'Expense Date',
            'createdAt' => 'Created At',
            'isPaid' => 'Is Paid',
        ];
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
    }
    /**
     * This scenarios method declares two scenarios for the model
     * @return array[]
     */
    public function scenarios()
    {
        $scenarios= parent::scenarios(); // TODO: Change the autogenerated stub
        $scenarios[self::SCENARIO_CREATE]=['name','amount'];
        $scenarios[self::SCENARIO_MAkE_PAYMENT]=['source','isPaid'];

        return $scenarios;
    }


}
